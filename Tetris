/*
  -------------------------------
  ููุงุฉ "ุงููุฑุดุฉ" - Arduino Retro Games
  -------------------------------
  
  ุฃููุงู ุจู ูู ุณูุณูุฉ ุงูุฃูุนุงุจ ุงูููุงุณูููุฉ ุนูู ููุงุฉ "ุงููุฑุดุฉ"!  
  ูู ูุฐุง ุงููุณุชูุฏุนุ ูุชูุงูู ูุฌููุนุฉ ูู ุงูุฃูุนุงุจ ุงููุฏููุฉ ุงูุชู ุชุนุชูุฏ ุนูู ุฃุฑุฏูููู ูุซู:
  - **ุงูุซุนุจุงู** (Snake)
  - **ุชูุชุฑุณ** (Tetris)
  - **ุจุฑูู ุฃูุช** (Breakout)
  - **ุณุจุงู ุงูุณูุงุฑุงุช** (Car Racing)
  - **ุจููุฌ ุจููุฌ** (Ping Pong)
  - **ุบุฒู ุงููุถุงุก** (Space Invaders)

  ุงูุฃูุนุงุจ ุฏู ูุจููุฉ ุจุงุณุชุฎุฏุงู ููููุงุช ุจุณูุทุฉ ูุซู:
  - ุดุงุดุฉ LED Matrix ุฃู OLED.
  - ุนุตุง ุชุญูู ุฃู ุฃุฒุฑุงุฑ.
  - ุฃุฑุฏูููู Uno ุฃู Nano.

  ุงูููุงุฉ ูุชุฎุตุตุฉ ูู ูุดุงุฑูุน ุฅููุชุฑูููุฉ ูุจุชูุฑุฉ ูุฃูุนุงุจุ ููู ูุตุฏุฑู ููุชุนูู ูุงูุชุณููุฉ ูุนุงู!
  ุชูุฏุฑ ุชุชุงุจุน ุงูููุฏูููุงุช ูู ุงูููุงุฉ ุนุดุงู ุชุนุฑู ุชูุงุตูู ุฃูุซุฑ ุนู ูู ูุนุจุฉ ูููููุฉ ุชูููุฐูุง.
  
  ุชุงุจุน ุงูููุงุฉ ุนูู ููุชููุจ:
 https://www.youtube.com/@ุงููุฑุดุฉ249


  ุงุณุชูุชุน ุจุงููุนุจ ูุงูุชุนูู! ๐ฎ๐ง
*/

#include <LedControl.h>

// ุชุนุฑูู ุงูุฏุจุงุจูุณ
#define DIN_PIN 12
#define CLK_PIN 11
#define CS_PIN 10
#define BUZZER_PIN 3
#define JOYSTICK_X_PIN A0
#define JOYSTICK_Y_PIN A1
#define JOYSTICK_SW_PIN 2

LedControl lc = LedControl(DIN_PIN, CLK_PIN, CS_PIN, 1);

// ุชุนุฑูู ุงููุบูุงุช ุงูููุณูููุฉ
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_G3  196
#define NOTE_C4  262
#define NOTE_D4  294
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_G4  392
#define NOTE_A4  440
#define NOTE_B4  494
#define NOTE_C5  523

// ุชุนุฑููุงุช ุงูุฏูุงู ุงููุณุจูุฉ
void newPiece();
void drawGrid();
void readInput();
bool checkCollision(int xOffset, int yOffset);
void moveDown();
void moveLeft();
void moveRight();
void rotatePiece();
void lockPiece();
void clearLines();
void checkTopOut();
void gameOver();
void resetGame();
void playPieceSpawnSound();
void playLineClearSound();
void playMoveSound();
void playGameOverSound();
void showGameOverAnimation();
void showRotationAnimation();

// ูุชุบูุฑุงุช ุงููุนุจุฉ
byte grid[8] = {0};
int currentPiece[4][2];
int pieceType, rotation = 0;
unsigned long lastDrop, lastInput;
int dropSpeed = 800;
int score = 0;
bool gameActive = true;

// ุฃุดูุงู ุงููุทุน ูุน ุฌููุน ุญุงูุงุช ุงูุฏูุฑุงู
const byte pieces[7][4][4][4] = {
  { // I
    {{1,1,1,1}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}},
    {{0,0,1,0}, {0,0,1,0}, {0,0,1,0}, {0,0,1,0}},
    {{1,1,1,1}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}},
    {{0,0,1,0}, {0,0,1,0}, {0,0,1,0}, {0,0,1,0}}
  },
  { // J
    {{1,0,0,0}, {1,1,1,0}, {0,0,0,0}, {0,0,0,0}},
    {{0,1,1,0}, {0,1,0,0}, {0,1,0,0}, {0,0,0,0}},
    {{0,0,0,0}, {1,1,1,0}, {0,0,1,0}, {0,0,0,0}},
    {{0,1,0,0}, {0,1,0,0}, {1,1,0,0}, {0,0,0,0}}
  },
  // ... (ุฃููู ุจููุฉ ุงููุทุน ุจููุณ ุงูุทุฑููุฉ)
};

void setup() {
  lc.shutdown(0, false);
  lc.setIntensity(0, 8);
  lc.clearDisplay(0);
  pinMode(JOYSTICK_SW_PIN, INPUT_PULLUP);
  randomSeed(analogRead(A2));
  resetGame();
}

void loop() {
  if(!gameActive) {
    if(digitalRead(JOYSTICK_SW_PIN) == LOW) {
      resetGame();
    }
    return;
  }

  if(millis() - lastDrop > dropSpeed) {
    moveDown();
    lastDrop = millis();
  }
  
  if(millis() - lastInput > 100) { // ุชุฃุฎูุฑ 100ms ููุชุญูู
    readInput();
    lastInput = millis();
  }
  
  drawGrid();
}

// ============== ูุธุงู ุงูุฃุตูุงุช ==============
void playPieceSpawnSound() {
  tone(BUZZER_PIN, NOTE_E4, 150);
  delay(175);
  tone(BUZZER_PIN, NOTE_G4, 150);
  delay(175);
  tone(BUZZER_PIN, NOTE_C5, 300);
  delay(350);
  noTone(BUZZER_PIN);
}

void playLineClearSound() {
  tone(BUZZER_PIN, NOTE_C5, 100);
  delay(120);
  tone(BUZZER_PIN, NOTE_G4, 100);
  delay(120);
  tone(BUZZER_PIN, NOTE_E4, 100);
  delay(120);
  tone(BUZZER_PIN, NOTE_G4, 100);
  delay(120);
  tone(BUZZER_PIN, NOTE_C5, 200);
  delay(240);
  noTone(BUZZER_PIN);
}

void playMoveSound() {
  tone(BUZZER_PIN, NOTE_G4, 50);
  delay(60);
  noTone(BUZZER_PIN);
}

void playGameOverSound() {
  tone(BUZZER_PIN, NOTE_C4, 300);
  delay(350);
  tone(BUZZER_PIN, NOTE_G3, 300);
  delay(350);
  tone(BUZZER_PIN, NOTE_C3, 300);
  delay(350);
  tone(BUZZER_PIN, NOTE_B2, 500);
  delay(600);
  noTone(BUZZER_PIN);
}

// ============== ุชุฃุซูุฑุงุช ุจุตุฑูุฉ ==============
void showGameOverAnimation() {
  for (int i = 0; i < 5; i++) {
    for (int y = 7; y >= 0; y--) {
      if (i % 2 == 0) {
        lc.setRow(0, y, grid[y]);
      } else {
        lc.setRow(0, y, 0);
      }
    }
    playGameOverSound();
    delay(300);
  }
  
  byte gameOverIcon[8] = {
    B00000000,
    B01100110,
    B01100110,
    B00000000,
    B01000010,
    B00100100,
    B00011000,
    B00000000
  };
  
  for (int i = 0; i < 8; i++) {
    lc.setRow(0, i, gameOverIcon[i]);
  }
}

void showRotationAnimation() {
  for(int i=0; i<2; i++) {
    lc.clearDisplay(0);
    delay(50);
    drawGrid();
    delay(50);
  }
}

// ============== ุฏูุงู ุงููุนุจุฉ ุงูุฃุณุงุณูุฉ ==============
void resetGame() {
  memset(grid, 0, 8);
  score = 0;
  gameActive = true;
  newPiece();
  lastDrop = millis();
  lastInput = millis();
}

void newPiece() {
  pieceType = random(7);
  rotation = 0;
  for(int i=0; i<4; i++) {
    currentPiece[i][0] = 3 + pieces[pieceType][rotation][i][0];
    currentPiece[i][1] = pieces[pieceType][rotation][i][1];
  }
  playPieceSpawnSound();
}

void drawGrid() {
  byte displayGrid[8];
  memcpy(displayGrid, grid, 8);
  
  for(int i=0; i<4; i++) {
    int x = currentPiece[i][0];
    int y = currentPiece[i][1];
    if(y >=0 && y <8) bitSet(displayGrid[y], 7-x);
  }
  
  for(int i=0; i<8; i++) {
    lc.setRow(0, i, displayGrid[i]);
  }
}

void readInput() {
  int xVal = analogRead(JOYSTICK_X_PIN);
  
  if(xVal < 300) {
    moveLeft();
  } else if(xVal > 700) {
    moveRight();
  }
  
  if(digitalRead(JOYSTICK_SW_PIN) == LOW) {
    rotatePiece();
    delay(200); // ููุน ุงูุงุฑุชุฏุงุฏ
  }
}

bool checkCollision(int xOffset, int yOffset) {
  for(int i=0; i<4; i++) {
    int newX = currentPiece[i][0] + xOffset;
    int newY = currentPiece[i][1] + yOffset;
    if(newX <0 || newX >7 || newY >7 || (newY >=0 && bitRead(grid[newY], 7-newX))) {
      return true;
    }
  }
  return false;
}

void moveDown() {
  if(!checkCollision(0, 1)) {
    for(int i=0; i<4; i++) currentPiece[i][1]++;
  } else {
    lockPiece();
    clearLines();
    checkTopOut();
    if(gameActive) newPiece();
  }
}

void moveLeft() {
  if(!checkCollision(-1, 0)) {
    for(int i=0; i<4; i++) currentPiece[i][0]--;
    playMoveSound();
  }
}

void moveRight() {
  if(!checkCollision(1, 0)) {
    for(int i=0; i<4; i++) currentPiece[i][0]++;
    playMoveSound();
  }
}

void rotatePiece() {
  int newRotation = (rotation + 1) % 4;
  int backup[4][2];
  
  // ุญูุธ ุงูุญุงูุฉ ุงูุญุงููุฉ
  for(int i=0; i<4; i++) {
    backup[i][0] = currentPiece[i][0];
    backup[i][1] = currentPiece[i][1];
  }
  
  // ุชุทุจูู ุงูุฏูุฑุงู ุงูุฌุฏูุฏ
  for(int i=0; i<4; i++) {
    currentPiece[i][0] = 3 + pieces[pieceType][newRotation][i][0];
    currentPiece[i][1] = pieces[pieceType][newRotation][i][1];
  }
  
  if(!checkCollision(0, 0)) {
    rotation = newRotation;
    showRotationAnimation();
    tone(BUZZER_PIN, NOTE_A4, 100);
  } else {
    // ุงุณุชุนุงุฏุฉ ุงูุญุงูุฉ ุงูุณุงุจูุฉ ุฅุฐุง ูุงู ููุงู ุชุตุงุฏู
    for(int i=0; i<4; i++) {
      currentPiece[i][0] = backup[i][0];
      currentPiece[i][1] = backup[i][1];
    }
  }
}

void lockPiece() {
  for(int i=0; i<4; i++) {
    int x = currentPiece[i][0];
    int y = currentPiece[i][1];
    if(y >=0) bitSet(grid[y], 7-x);
  }
}

void clearLines() {
  int linesCleared = 0;
  for(int y=0; y<8; y++) {
    if(grid[y] == B11111111) {
      for(int yy=y; yy>0; yy--) grid[yy] = grid[yy-1];
      grid[0] = 0;
      linesCleared++;
      score += 100;
    }
  }
  if(linesCleared > 0) {
    playLineClearSound();
    for(int i=0; i<3; i++) {
      lc.clearDisplay(0);
      delay(100);
      drawGrid();
      delay(100);
    }
  }
}

void checkTopOut() {
  for(int x=0; x<8; x++) {
    if(bitRead(grid[0], 7-x)) {
      gameOver();
      break;
    }
  }
}

void gameOver() {
  gameActive = false;
  showGameOverAnimation();
}
