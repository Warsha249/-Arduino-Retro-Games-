/*
  -------------------------------
  ููุงุฉ "ุงููุฑุดุฉ" - Arduino Retro Games
  -------------------------------
  
  ุฃููุงู ุจู ูู ุณูุณูุฉ ุงูุฃูุนุงุจ ุงูููุงุณูููุฉ ุนูู ููุงุฉ "ุงููุฑุดุฉ"!  
  ูู ูุฐุง ุงููุณุชูุฏุนุ ูุชูุงูู ูุฌููุนุฉ ูู ุงูุฃูุนุงุจ ุงููุฏููุฉ ุงูุชู ุชุนุชูุฏ ุนูู ุฃุฑุฏูููู ูุซู:
  - **ุงูุซุนุจุงู** (Snake)
  - **ุชูุชุฑุณ** (Tetris)
  - **ุจุฑูู ุฃูุช** (Breakout)
  - **ุณุจุงู ุงูุณูุงุฑุงุช** (Car Racing)
  - **ุจููุฌ ุจููุฌ** (Ping Pong)
  - **ุบุฒู ุงููุถุงุก** (Space Invaders)

  ุงูุฃูุนุงุจ ุฏู ูุจููุฉ ุจุงุณุชุฎุฏุงู ููููุงุช ุจุณูุทุฉ ูุซู:
  - ุดุงุดุฉ LED Matrix ุฃู OLED.
  - ุนุตุง ุชุญูู ุฃู ุฃุฒุฑุงุฑ.
  - ุฃุฑุฏูููู Uno ุฃู Nano.

  ุงูููุงุฉ ูุชุฎุตุตุฉ ูู ูุดุงุฑูุน ุฅููุชุฑูููุฉ ูุจุชูุฑุฉ ูุฃูุนุงุจุ ููู ูุตุฏุฑู ููุชุนูู ูุงูุชุณููุฉ ูุนุงู!
  ุชูุฏุฑ ุชุชุงุจุน ุงูููุฏูููุงุช ูู ุงูููุงุฉ ุนุดุงู ุชุนุฑู ุชูุงุตูู ุฃูุซุฑ ุนู ูู ูุนุจุฉ ูููููุฉ ุชูููุฐูุง.
  
  ุชุงุจุน ุงูููุงุฉ ุนูู ููุชููุจ:
 https://www.youtube.com/@ุงููุฑุดุฉ249


  ุงุณุชูุชุน ุจุงููุนุจ ูุงูุชุนูู! ๐ฎ๐ง
*/


#include <LedControl.h>

LedControl lc = LedControl(12, 11, 10, 1); // DIN, CLK, CS, ุนุฏุฏ ุงููุตูููุงุช

int paddleX = 3;
int ballX = 3, ballY = 5;
int ballDX = 1, ballDY = -1;

const int joyX = A0;
const int buzzer = 8;

bool bricks[3][8];

void setup() {
  lc.shutdown(0, false);
  lc.setIntensity(0, 8);
  lc.clearDisplay(0);

  pinMode(buzzer, OUTPUT);

  // ุชุฌููุฒ ุงูุทูุจ
  for (int y = 0; y < 3; y++)
    for (int x = 0; x < 8; x++)
      bricks[y][x] = true;
}

void loop() {
  lc.clearDisplay(0);

  // ุงูุชุญูู ูู ุงููุถุฑุจ
  int xVal = analogRead(joyX);
  if (xVal < 400 && paddleX > 0) paddleX--;
  else if (xVal > 600 && paddleX < 5) paddleX++;

  // ุชุญุฏูุซ ุงููุฑุฉ
  ballX += ballDX;
  ballY += ballDY;

  // ุงุฑุชุฏุงุฏ ูู ุงูุฌูุงูุจ
  if (ballX < 0 || ballX > 7) {
    ballDX *= -1;
    ballX += ballDX;
  }

  // ุงุฑุชุฏุงุฏ ูู ุงูุณูู
  if (ballY < 0) {
    ballDY *= -1;
    ballY += ballDY;
  }

  // ุงุตุทุฏุงู ุจุงููุถุฑุจ
  if (ballY == 7 && (ballX >= paddleX && ballX <= paddleX + 2)) {
    ballDY *= -1;
    tone(buzzer, 800, 50);

    if (ballX == paddleX) ballDX = -1;
    else if (ballX == paddleX + 2) ballDX = 1;
    // ูู ูู ุงููุต ููุถู ููุณ ุงูุงุชุฌุงู
  }

  // ุงุตุทุฏุงู ุจุงูุทูุจ
  if (ballY < 3 && bricks[ballY][ballX]) {
    bricks[ballY][ballX] = false;
    ballDY *= -1;
    tone(buzzer, 1000, 50);
  }

  // ุงูุชุญูู ูู ุงูููุฒ
  if (allBricksBroken()) {
    celebrateWin();
    resetGame();
    return;
  }

  // Game Over
  if (ballY > 7) {
    tone(buzzer, 200, 1000);
    delay(1000);
    resetGame();
    return;
  }

  // ุนุฑุถ ุงูุทูุจ
  for (int y = 0; y < 3; y++)
    for (int x = 0; x < 8; x++)
      if (bricks[y][x]) lc.setLed(0, y, x, true);

  // ุนุฑุถ ุงููุฑุฉ
  lc.setLed(0, ballY, ballX, true);

  // ุนุฑุถ ุงููุถุฑุจ
  lc.setLed(0, 7, paddleX, true);
  lc.setLed(0, 7, paddleX + 1, true);
  lc.setLed(0, 7, paddleX + 2, true);

  delay(200);
}

// ุฅุนุงุฏุฉ ุถุจุท ุงููุนุจุฉ
void resetGame() {
  ballX = 3; ballY = 5;
  ballDX = 1; ballDY = -1;
  paddleX = 3;

  for (int y = 0; y < 3; y++)
    for (int x = 0; x < 8; x++)
      bricks[y][x] = true;
}

// ุงูุชุญูู ูู ููุฒ ุงููุงุนุจ
bool allBricksBroken() {
  for (int y = 0; y < 3; y++)
    for (int x = 0; x < 8; x++)
      if (bricks[y][x]) return false;
  return true;
}

// ุงุญุชูุงู ุงูููุฒ ๐
void celebrateWin() {
  for (int i = 0; i < 5; i++) {
    lc.clearDisplay(0);
    tone(buzzer, 1500, 100);
    delay(150);

    for (int y = 0; y < 8; y++)
      for (int x = 0; x < 8; x++)
        lc.setLed(0, y, x, true);

    tone(buzzer, 1000, 100);
    delay(150);
  }

  noTone(buzzer);
  lc.clearDisplay(0);
  delay(1000);
}
